# Generated by Django 4.2.7 on 2024-06-07 19:19

import cloudinary_storage.storage
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=500)),
                ('host_email', models.EmailField(max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('start_datetime', models.DateTimeField(default=datetime.datetime(2024, 6, 7, 19, 19, 0, 580854, tzinfo=datetime.timezone.utc))),
                ('end_datetime', models.DateTimeField(default=datetime.datetime(2024, 6, 7, 19, 19, 0, 580873, tzinfo=datetime.timezone.utc))),
                ('location', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('image', models.ImageField(storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='static/event_banner')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender_email', models.EmailField(max_length=254)),
                ('message_datetime', models.DateTimeField(default=datetime.datetime(2024, 6, 7, 19, 19, 0, 585132, tzinfo=datetime.timezone.utc))),
                ('message', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'db_table': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='Photos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='static/event_images')),
            ],
            options={
                'verbose_name': 'Photo',
                'verbose_name_plural': 'Photos',
                'db_table': 'Photos',
            },
        ),
        migrations.CreateModel(
            name='SessionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('speaker', models.CharField(max_length=500)),
                ('start_datetime', models.DateTimeField(default=datetime.datetime(2024, 6, 7, 19, 19, 0, 585839, tzinfo=datetime.timezone.utc))),
                ('end_datetime', models.DateTimeField(default=datetime.datetime(2024, 6, 7, 19, 19, 0, 585851, tzinfo=datetime.timezone.utc))),
                ('location', models.CharField(max_length=200)),
                ('host_email', models.EmailField(max_length=254)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Event.event')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'db_table': 'Session',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=100)),
                ('role_to_user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='ImageAfterEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Event.event')),
                ('image', models.ManyToManyField(blank=True, to='Event.photos')),
            ],
            options={
                'verbose_name': 'Image_After_Event',
                'verbose_name_plural': 'Images_After_Events',
                'db_table': 'Images_After_Event',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('feedback', models.CharField(max_length=500)),
                ('feedback_datetime', models.DateTimeField(default=datetime.datetime(2024, 6, 7, 19, 19, 0, 585486, tzinfo=datetime.timezone.utc))),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Event.event')),
            ],
            options={
                'verbose_name': 'Feedback_of_Event',
                'verbose_name_plural': 'Feedback_of_Events',
                'db_table': 'Feedback_of_Events',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='role',
            field=models.ManyToManyField(blank=True, to='Event.role'),
        ),
        migrations.CreateModel(
            name='CreateTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Event.event')),
            ],
            options={
                'verbose_name': 'Tickets_of_Event',
                'verbose_name_plural': 'Tickets_of_Events',
                'db_table': 'Tickets_of_Events',
                'unique_together': {('type', 'event')},
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('qr_code', models.ImageField(storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='QRcodes')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Event.event')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Event.createticket')),
            ],
            options={
                'verbose_name': 'Booked_Tickets',
                'verbose_name_plural': 'Booked_Tickets',
                'db_table': 'Booked_Tickets',
                'unique_together': {('email', 'event')},
            },
        ),
        migrations.CreateModel(
            name='InviteModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_email', models.CharField(max_length=200)),
                ('invitee_email', models.CharField(max_length=200)),
                ('rsvp', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Event.event')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Event.role')),
            ],
            options={
                'verbose_name': 'Invite_list',
                'verbose_name_plural': 'Invite_list',
                'db_table': 'Invite_list',
                'unique_together': {('invitee_email', 'event', 'role')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('host_email', 'name')},
        ),
    ]
